import os
import json
import pandas as pd
from indra_db.util.helpers import unpack

from indra_db_lite.csv import query_to_csv


def abstracts_to_csv_raw(outpath: str) -> None:
    """Creates csv file containing abstracts at location specified by path.

    Creates csv file with 5 columns. There is no header but there are columns
    for text_ref_id, text_content_id1, text_content_id2, title, abstract.
    text_ref_id is the id for associated document in indra_db's text_ref
    table, text_content_id1, and text_content_id2 are the ids in indra_db's
    text_content table for the abstract and title of the document respectively.
    The title column contains hex encoded Postgres bytea data for the
    compressed title and the abstract column contains the hex encoded bytea
    data for the compressed abstract.

    Parameters
    ----------
    outpath : str
        Path to location where output file is to be stored.
    """
    abstracts_query = """
    SELECT
        tc1.text_ref_id AS text_ref_id,
        tc1.id AS tc_id1,
        tc2.id AS tc_id2,
        encode(tc2.content, 'hex') AS title,
        encode(tc1.content, 'hex') AS abstract
    FROM
        text_content tc1
    JOIN
        text_content tc2
    ON
        tc1.text_ref_id = tc2.text_ref_id AND
        tc1.text_type = 'abstract' AND
        tc2.text_type = 'title' AND
        tc1.content is NOT NULL AND
        tc2.content is NOT NULL
    """
    query_to_csv(abstracts_query, outpath)


def process_raw_abstracts_csv(
        inpath: str, outpath: str, chunksize: int = 1000000
) -> None:
    """Process csv generated by `abstracts_to_csv_raw` and create new csv.

    Output csv file has 4 columns. text_ref_id, tc_id1, tc_id2, content.
    text_ref_id is the id for the associated document in indra_db's text_ref
    table. tc_id1 and tc_id2 are the ids for the abstract and title of the
    document in indra_db's text_content table respectively. content contains
    a json serialized list of the form [<title>, <abstract>], where <title>
    and <abstract> are given as plain strings.

    Parameters
    ----------
    inpath : str
        Path to csv file generated by `abstracts_to_csv_raw`.

    outpath : str
        Path to location for placing output file. Overwrites file if it
        already exists at outpath.

    chunksize : Optional[int]
        chunksize parameter passed to `pandas.read_csv` to specify the number
        of rows of the input csv to process at a time to reduce memory
        consumption. Default: 1000000
    """
    # Remove outpath if it already exists
    if os.path.exists(outpath):
        os.remove(outpath)
    with pd.read_csv(
            inpath,
            sep=',',
            chunksize=chunksize,
            names=['text_ref_id', 'tc_id1', 'tc_id2', 'title', 'abstract'],
    ) as reader:
        for chunk in reader:
            chunk.loc[:, 'abstract'] = chunk.abstract.apply(
                lambda x: unpack(bytes.fromhex(x))
            )
            chunk.loc[:, 'title'] = chunk.title.apply(
                lambda x: unpack(bytes.fromhex(x))
            )
            chunk.loc[:, 'content'] = chunk.apply(
                lambda row: json.dumps([row.title, row.abstract]),
                axis=1
            )
            output = chunk[['text_ref_id', 'tc_id1', 'tc_id2', 'content']]
            output.to_csv(
                outpath,
                mode='a',
                header=not os.path.exists(outpath),
                index=False,
            )
